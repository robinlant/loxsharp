program        -> declaration* EOF ;

declaratoion   -> varDecl | statement ;
varDecl        -> "var" IDENTIFIER ( "=" expression )? ";" ;

statement      -> exprStmt
               | printStmt
               | block
               | ifStmt
               | whileStmt
               | forStmt
               | breakStmt ;

exprStmt       -> expression ";" ;
printStmt      -> "print" expression ";" ;
block          -> "{" declaration "}" ;
ifStmt         -> "if" "(" expression ")" statement
               ( "else" statement )? ;
whileStmt      -> "while" "(" expression ")" statement ;
forStmt        -> "for" "(" ( varDecl | exprStmt ";" )
               expression? ";"
               expression? ")" statement ;
breakStmt      -> "break" ";" ;

expression     -> assignment ;
assignment     -> IDENTIFIER "=" assignment | comma ;
comma          -> conditional ( "," conditional)* ;
conditional    -> logic_or ("?" conditional ":" conditional)* ;
logic_or       -> logic_and ( "or" logic_and )* ;
logic_and      -> equality ( "and" equality )* ;
equality       -> comparison ( ( "!=" | "==" ) comparison )* ;
comparison     -> term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term           -> factor ( ( "-" | "+" ) factor )* ;
factor         -> unary ( ( "/" | "*" ) unary )* ;
unary          -> ( "!" | "-" ) unary
               | primary ;
primary        -> NUMBER | STRING | "true" | "false" | "nil"
               | "(" expression ")" ;